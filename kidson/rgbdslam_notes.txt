----------------
Installation:
----------------
1. Edit g2o manifest.xml add dependencies:
    <cpp cflags="-I${prefix}/include/ -I/usr/include/suitesparse" lflags="-L${prefix}/lib/ -lcsparse -Wl,-rpath,${prefix}/lib/ -lg2o_core -lg2o_stuff -lcholmod" />

2. openni-kinect must be installed

----------------
Running
----------------

roslaunch rgbdslam kinect+rgbdslam.launch

or

roslaunch openni_camera openni_node.launch
rosrun rgbdslam rgbdslam


------------------
Main flow of code
-----------------
kinectCallback
cameraCallback -> here node is created, matching is done
callProcessing 
processNode -> GraphManager::addNode -> most of the code is in here


1.  Find & Extract features
-Occurs in Node constructor
-Node created by OpenNIListener::cameraCallback, when pause is set false
-when USE_SIFT_GPU=0 openCV FeatureDetector and DescriptorExtractor objects are used
-when USE_SIFT_GPU=1 SiftGPU::RunSIFT()

OpenNIListener::retrieveTransformations - what does this do exactly

2. RANSAC for finding a transformation from feature associations
Done in Node::getRelativeTransformationTo
OpenNIListener::callProcessing -> 
	OpenNIListener::processNode -> 
		GraphManager::addNode -> 
			Node::matchNodePair -> 
				Node::getRelativeTransformationTo


3. GICP fallback if features are not matching
Done in Node::getRelativeTransformationTo after RANSAC
getRelativeTransformationTo_ICP_code - not implemented
getRelativeTransformationTo_ICP_bin - not implemented

4. Put transformations into g2o (has its own paper) -> optimized trajectory

GraphManager::addNode -> addEdgeToG2O
all stuff with object optimizer_

5. Combine trajectory with original point clouds and use the octomap library
not implemented here (ask felix)


-------------------------
Output
-------------------------

-what exactly the algorithm outputs
	Various save options
	- save			-saves entire point cloud.  If a file name is already specified then use that, instead bin/quicksave.pcd 
	- save as		-saves entire point cloud.  Asks for filename.  Allows ability to save as .ply
	- save node wise-saves all individual point clouds (not transformed)
	- send model	-broadcasts point clouds to a topic (does it just once)
	- trajectory output - text file of trajectory, poses for each node
	
-what is the data in the bag file - set of poses?		---- look at data at the end of edges
	- the optimizer - all vertices (nodes) and edges (transforms) between them
	- cannot determine what the values after the edges are. I believe it is something to do with the nodes
	- however these files can be used to load an optimizer object with vertices and edges.  
	//! load the graph from a stream. Uses the Factory singleton for creating the vertices and edges.
    virtual bool load(std::istream& is, bool createEdges=true);
    - the difference between before and after is the difference between before and after optimization function has run 
    -(normally run every time a node is added to the graph)

-need the set of pointclouds and respective images and transforms for surface reconstruction (dejan)
	- All the nodes have their original pointclouds.  Function to write them all individually to disk (GraphManager::saveIndividualCloudsToFile)  
	- Each node has a respective transform from the optimizer, also easily obtained (GraphManager::getAllPosesAsMatrixList, GraphManager::saveTrajectory)


-------------------------------
Parameters
-------------------------------

    config["min_matches"]                   = static_cast<int> (25);           //if using SiftGPU and GLSL you should use max. 60 matches
	//usually many matches, over 100									------write to felix about this
	// increasing this number seems like a good idea, however it also reduces the number of edges in the graph.
	// also, min translation and rotation should be decreased if this is increased

    config["min_translation_meter"]         = static_cast<double> (0.05);
    config["min_rotation_degree"]           = static_cast<int> (2.5);
    // If a transform is too small (as specified by the parameters above) It will not be added to the graph
    // this means going too slow will not improve performance
    
    config["min_time_reported"]  	=1e9	// reports the runtime to rxlogger when time exceeds this value.  In this case never
    config["squared_meshing_threshold"] 	//something to do with the visualizer
    config["connectivity"]                  = static_cast<int> (10);
    // Number of nodes for the current node to match against to find edges
    // used as parameter max_targets in getPotentialEdgeTargets  
    /// max_targets determines how many potential edges are wanted
	/// max_targets < 0: No limit
	/// max_targets = 0: Compare to first frame only
	/// max_targets = 1: Compare to previous frame only
	/// max_targets > 1: Select intelligently (TODO: rather stupid at the moment)
    
    config["max_connections"] // max number of edges a node may have

    config["concurrent_node_construction"]  = static_cast<bool> (true);		// allows next node to be created (feature detection) whilst the current undergoes ransac etc.
    config["concurrent_edge_construction"]  = static_cast<bool> (true);
    	// Allows simultaneous processing of node matching to add edges.  Comment from code:
            //First compile a qlist of the nodes to be compared, then run the comparisons in parallel,
            //collecting a qlist of the results (using the blocking version of mapped).
            
    config["voxelfilter_size"]  // Filters the point cloud as a node is created.  <=0 turns it off 

    config["wide_queue_size"]    	// Not used
    config["optimizer_skip_step"] 	// How often should the graph be optimized. E.g. 5 means optimize once for every 5 nodes that are added to the graph
    config["data_skip_step"]   		
    	// skips 1 out of x camera frames (at callback level). set to 1 to turn off.  This only applies for stereo and no cloud data callbacks

    config["depth_scaling_factor"]			---- felix.  how to set that 		
    // scales the Z values of the point cloud.  Used when mapping features to point clouds

    config["keep_all_nodes"]  
      // if a node is added to the graph, but no edges are found, setting this value to true
      // will add an edge same as the edge of the last match (constant motion assumption)

